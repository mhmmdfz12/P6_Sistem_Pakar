# -*- coding: utf-8 -*-
"""P6_Sistem_Pakar

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TuCelgpJFeCsuVTB38uopoWXAscr2EQB
"""

!pip install experta

!pip install --upgrade frozendict

from experta import *

class Diagnosis(KnowledgeEngine):
    @Rule(Fact(cough=True) & Fact(fever=True) & Fact(fatigue=True))
    def flu(self):
      print("Diagnosis: You may have the Flu.")

    @Rule(Fact(cough=True) & Fact(fever=True) & Fact(breathing_difficulty=True))
    def pneumonia(self):
      print("Diagnosis: You may have Pneumia.")

    @Rule(Fact(sneezing=True) & Fact(runny_nose=True) & Fact(cough=True))
    def cold(self):
      print("Diagnosis: You may have the a Common Cold.")

    @Rule(Fact(sore_throat=True) & Fact(fever=True))
    def throat_infection(self):
      print("Diagnosis: You may have a Throat Infection.")

    @Rule(Fact(cough=False) & Fact(fever=False) & Fact(fatigue=False))
    def healthy(self):
      print("Diagnosis: You seem to be Healthy.")

    @Rule(Fact(fever=True) & Fact(cough=True) & Fact(fatigue=True) &  Fact(breathing_difficulty=True) & Fact(sore_throat=True))
    def covid19(self):
      print("Diagnosis: You may have COVID-19.")

    @Rule(Fact(runny_nose=True) & Fact(sneezing=True) & Fact(headache=True))
    def sinusitis(self):
      print("Diagnosis: You may have Sinusitis.")

    @Rule(Fact(fever=True) & Fact(headache=True) & Fact(muscle_pain=True) & Fact(fatigue=True))
    def dengue(self):
      print("Diagnosis: You may have Dengue Fever.")

    @Rule(Fact(sneezing=True) & Fact(runny_nose=True) & Fact(itchy_eyes=True))
    def allergic_rhinitis(self):
      print("Diagnosis: You may have Allergic Rhinitis.")

    @Rule()
    def unknown(self):
      print("Diagnosis: Your symptoms do not match any known condition in this system.")


def get_input():
  """Helper function to get user input as boolean (yes/no)."""
  def ask_question(question):
    return input(question + "(yes/no): ").strip().lower() == "yes"

  return {
    "cough": ask_question("Do you have a cough?"),
    "fever": ask_question("Do you have a fever?"),
    "fatigue": ask_question("Do you feel fatigued?"),
    "breathing_difficulty": ask_question("Do you have breathing difficulty?"),
    "sneezing": ask_question("Are you sneezing"),
    "runny_nose": ask_question("Do you have a runny nose?"),
    "sore_throat": ask_question("Do you have a sore throat?"),
    "headache": ask_question("Do you have a headache?"),
    "muscle_pain": ask_question("Do you have muscle pain?"),
    "itchy_eyes": ask_question("Do you have itchy eyes?")
  }

# Running the Expert System
if __name__ == "__main__":
  symptoms = get_input()
  engine = Diagnosis()
  engine.reset()

  for symptom, present in symptoms.items():
    engine.declare(Fact(**{symptom: present}))

  engine.run()

from experta import *

class SistemPakarMedis(KnowledgeEngine):
  @Rule(Fact(demam=True) & Fact(batuk=True))
  def flu(self):
    print("Diagnosis: Flu.")

  @Rule(Fact(sakit_tenggorokan=True) & Fact(demam=True))
  def throat_infection(self):
    print("Diagnosis: Radang Tenggorokan.")

  @Rule(Fact(nyeri_otot=True) & Fact(nyeri_perut=True))
  def Hernia(self):
    print("Diagnosis: Hernia. Innalillahi")

# Running the Expert System
engine = SistemPakarMedis()
engine.reset()
engine.declare(Fact(nyeri_otot=True))
engine.declare(Fact(nyeri_perut=True)) # Input symptoms
engine.run()

def forward_chaining(facts, rules):
  inferred = set(facts)
  changed = True

  while changed:
    changed = False
    for rule in rules:
      if rule["if"].issubset(inferred) and rule["then"] not in inferred:
        inferred.add(rule["then"])
        changed = True
  return inferred

facts = ("has_feathers", "can_fly", "lays_eggs")
rules = [
    {"if": {"has_feathers", "can_fly"}, "then" : "is_brid"},
    {"if": {"lays_eggs", "is_bird"}, "then": "is_chicken"},
]

result = forward_chaining(facts, rules)
print("Inferred facts:", result)

def backward_chaining(goal, facts, rules):
  if goal in facts:
    return True
  for rule in rules:
    if rule["then"] == goal:
      if all(backward_chaining(cond, facts,rules) for cond in rule["if"]):
        return True
  return False

facts = {"likes_computers", "solves_problems"}
rules = [
    {"if": {"likes_computers", "solves_problems"}, "then": "should_be_engineer"},
    {"if": {"should_be_engineer", "likes_programming"}, "then": "software_engineer"}
]

goal = "software_engineer"
result = backward_chaining(goal, facts, rules)
print(f"is '{goal}' provable? ->", result)

def forward_chaining(facts, rules):
    inferred = set(facts)
    changed = True

    while changed:
        changed = False
        for rule in rules:
            if rule["if"].issubset(inferred) and rule["then"] not in inferred:
                inferred.add(rule["then"])
                changed = True
    return inferred


facts = {"has_wheels", "has_engine", "has_four_wheels"}
rules = [
    {"if": {"has_wheels", "has_engine"}, "then" : "is_vehicle"},
    {"if": {"is_vehicle", "has_two_wheels"}, "then": "is_motorcycle"},
    {"if": {"is_vehicle", "has_four_wheels"}, "then": "is_car"}
]

result = forward_chaining(facts, rules)
print("Inferred facts:", result)

def backward_chaining(goal, facts, rules):
  if goal in facts:
    return True
  for rule in rules:
    if rule["then"] == goal:
      if all(backward_chaining(cond, facts,rules) for cond in rule["if"]):
        return True
  return False

facts = {"has_feathers", "has_small_wings"}
rules = [
    {"if": {"is_bird", "cannot_fly"}, "then": "is_penguin"},
    {"if": {"has_feathers"}, "then": "is_bird"},
    {"if": {"has_small_wings"}, "then": "cannot_fly"}
]

goal = "is_penguin"
result = backward_chaining(goal, facts, rules)
print(f"is '{goal}' provable? ->", result)